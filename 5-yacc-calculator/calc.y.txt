%{
#include<stdio.h>
#include<math.h>
%}

%token NUMBER PLUS MUL OP CP DIV SUB MOD EXP

%%
S : E {printf("Value of expression is:%d",$1);};

E : E PLUS H {$$=$1+$3;}
  | E SUB H  {$$=$1-$3;}
  | H{$$=$1;};



H : H MUL G  {$$=$1*$3;}
  | H DIV G  {$$=$1/$3;}
  | H MOD G  {$$=$1%$3;}
  | G {$$=$1;};

G : G EXP I  {$$=pow($1,$3);}  //while compiling write -lm
  | I {$$=$1;};

I : OP E CP {$$=$2;}
  | NUMBER {$$=$1;};
  
%%

int main()
{
  	yyparse();
  	return 0;
}

/*
To compile

lex file.l
yacc -d file.y
gcc lex.yy.c y.tab.c -ll -ly
./a.out
terminate execution with ctrl d
*/
